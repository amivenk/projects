package huffman;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Collections;

/**
 * This class contains methods which, when used together, perform the
 * entire Huffman Coding encoding and decoding process
 * 
 * @author Ishaan Ivaturi
 * @author Prince Rawal
 */
public class HuffmanCoding {
    private String fileName;
    private ArrayList<CharFreq> sortedCharFreqList;
    private TreeNode huffmanRoot;
    private String[] encodings;

    public HuffmanCoding(String f) { 
        fileName = f; 
    }

    public void makeSortedList() {
        StdIn.setFile(fileName);

        int l=0;
        sortedCharFreqList = new ArrayList<CharFreq>();
        while (StdIn.hasNextChar()) {
            CharFreq newChar = new CharFreq(StdIn.readChar(), 1);
            l++;
            boolean containsChar=false;
            for (CharFreq chars : sortedCharFreqList) {
                if (chars.getCharacter().compareTo(newChar.getCharacter()) == 0) {
                    containsChar=true;
                    chars.setProbOcc(chars.getProbOcc() + 1);
                    break;
                }
            }
            if(!containsChar)
                sortedCharFreqList.add(0,newChar);
        }
        if (sortedCharFreqList.size()==1){
            int x=sortedCharFreqList.get(0).getCharacter();
            if (x==127){
                x=0;
            }
            else {
                x++;
            }

            sortedCharFreqList.add(0,new CharFreq((char)x,0));
        }
        for (CharFreq chars : sortedCharFreqList) {
            chars.setProbOcc(chars.getProbOcc()/l);;
        }
        Collections.sort(sortedCharFreqList);
    }

    /**
     * Builds a huffman coding tree, and stores its root
     * in huffmanRoot
     */
    public void makeTree() {

        Queue<CharFreq> source=new Queue<CharFreq>();
        for (CharFreq c : sortedCharFreqList) {
            source.enqueue(c);
        }
        Queue<TreeNode> target=new Queue<TreeNode>();
        TreeNode s= new TreeNode(source.dequeue(),null,null);
        TreeNode b= new TreeNode(source.dequeue(),null,null);
        CharFreq nc=new CharFreq(null,s.getData().getProbOcc()+b.getData().getProbOcc());
        TreeNode nodeNew=new TreeNode(nc,s,b);
        target.enqueue(nodeNew);
        while(!source.isEmpty() || target.size()!=1){
            if(source.isEmpty()){
                s=target.dequeue();
                b=target.dequeue();
            }
            else{
                if (source.peek().getProbOcc()>target.peek().getData().getProbOcc()) s=target.dequeue();
                else s=new TreeNode(source.dequeue(),null,null);
                if (source.isEmpty()) b=target.dequeue();
                else if (target.isEmpty()) b= new TreeNode(source.dequeue(),null,null);
                else if(source.peek().getProbOcc()>target.peek().getData().getProbOcc()) b=target.dequeue();
                else b=new TreeNode(source.dequeue(),null,null);
            }
            nc=new CharFreq(null,s.getData().getProbOcc()+b.getData().getProbOcc());
            nodeNew=new TreeNode(nc,s,b);
            target.enqueue(nodeNew);
        }
        huffmanRoot=target.dequeue();
    }

    
    public void makeEncodings() {

        encodings=new String[128];
        makeEncodings(huffmanRoot, "");
    }

    private void makeEncodings(TreeNode root, String b){
        if (root==null)
            return;
        else {
            makeEncodings(root.getLeft(), b + "0");
            if (root.getData().getCharacter() != null) {
                encodings[root.getData().getCharacter()] = b;
                return;
            }
            makeEncodings(root.getRight(), b + "1");
        }
    }

    
    public void encode(String encodedFile) {
        String bit="";
        StdIn.setFile(fileName);
        makeEncodings();
        while(StdIn.hasNextChar()){
            bit+=encodings[StdIn.readChar()];
        }
        writeBitString(encodedFile, bit);
    }
    
   
    public static void writeBitString(String filename, String bitString) {
        byte[] bytes = new byte[bitString.length() / 8 + 1];
        int bytesIndex = 0, byteIndex = 0, currentByte = 0;

        // Pad the string with initial zeroes and then a one in order to bring
        // its length to a multiple of 8. When reading, the 1 signifies the
        // end of padding.
        int padding = 8 - (bitString.length() % 8);
        String pad = "";
        for (int i = 0; i < padding-1; i++)
            pad = pad + "0";
        pad = pad + "1";
        bitString = pad + bitString;

        // For every bit, add it to the right spot in the corresponding byte,
        // and store bytes in the array when finished
        for (char c : bitString.toCharArray()) {
            if (c != '1' && c != '0') {
                System.out.println("Invalid characters in bitstring");
                return;
            }

            if (c == '1'){
                currentByte += 1 << (7-byteIndex);
            }
            byteIndex++;
            
            if (byteIndex == 8) {
                bytes[bytesIndex] = (byte) currentByte;
                bytesIndex++;
                currentByte = 0;
                byteIndex = 0;
            }
        }
        
        // Write the array of bytes to the provided file
        try {
            FileOutputStream out = new FileOutputStream(filename);
            out.write(bytes);
            out.close();
        }
        catch(Exception e) {
            System.err.println("Error when writing to file!");
        }
    }

  
    public void decode(String encodedFile, String decodedFile) {
        StdOut.setFile(decodedFile);
        makeEncodings();
        String bits=readBitString(encodedFile);
        //System.out.println(bitString);
        TreeNode root=huffmanRoot;
        for (Character strings : bits.toCharArray()) {
            if(strings=='0')
                root=root.getLeft();
            if(strings=='1')
                root=root.getRight();
            if(root.getData().getCharacter()!=null){
                StdOut.print(root.getData().getCharacter());
                root=huffmanRoot;
            }
        }
    }

    /**
     * Reads a given file byte by byte, and returns a string of 1's and 0's
     * representing the bits in the file
     */
    public static String readBitString(String filename) {
        String bitString = "";
        
        try {
            FileInputStream in = new FileInputStream(filename);
            File file = new File(filename);

            byte bytes[] = new byte[(int) file.length()];
            in.read(bytes);
            in.close();
            
            // For each byte read, convert it to a binary string of length 8 and add it
            // to the bit string
            for (byte b : bytes) {
                bitString = bitString + String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');
            }

            // Detect the first 1 signifying the end of padding, then remove the first few
            // characters, including the 1
            for (int i = 0; i < 8; i++) {
                if (bitString.charAt(i) == '1') 
                    return bitString.substring(i+1);
            }
            
            return bitString.substring(8);
        }
        catch(Exception e) {
            System.out.println("Error while reading file!");
            return "";
        }
    }

    public String getFileName() { 
        return fileName; 
    }

    public ArrayList<CharFreq> getSortedCharFreqList() { 
        return sortedCharFreqList; 
    }

    public TreeNode getHuffmanRoot() { 
        return huffmanRoot; 
    }

    public String[] getEncodings() { 
        return encodings; 
    }
}
