In this assignment you will go through the process of importing and analyzing an internal email communication network between employees of a mid-sized
manufacturing company. Each node represents an employee and each directed edge between two nodes represents an individual email. The left node 
represents the sender and the right node represents the recipient.

import networkx as nx

Using networkx, load up the directed multigraph from email_network.txt.

def answer_one():
    
    G = nx.read_edgelist('email_network.txt', delimiter='\t', data=[('time', int)], create_using=nx.MultiDiGraph())
 
    return G
    
How many employees and emails are represented in the graph from Question 1?

def answer_two():
        
    G = answer_one()
    
    return len(G.nodes()), len(G.edges())
    
When an employee sends an email to another employee, a communication channel has been created, allowing the sender to provide information to the receiver, but not vice versa.
Based on the emails sent in the data, is it possible for information to go from every employee to every other employee?
Then, assume that a communication channel established by an email allows information to be exchanged both ways.
Based on the emails sent in the data, is it possible for information to go from every employee to every other employee?    

def answer_three():    
    G = answer_one()
    return nx.is_strongly_connected(G), nx.is_connected(G.to_undirected())
    
How many nodes are in the largest (in terms of nodes) weakly connected component?

def answer_four():
    G = answer_one()
    wccs = nx.weakly_connected_components(G)
    return len(max(wccs, key=len))

How many nodes are in the largest (in terms of nodes) strongly connected component?

def answer_five():
    G = answer_one()
    sccs = nx.strongly_connected_components(G)
    return len(max(sccs, key=len))

Using the NetworkX function strongly_connected_component_subgraphs, find the subgraph of nodes in a largest strongly connected component. Call this graph G_sc.

def answer_six():
    G = answer_one()
    scc_subs = nx.strongly_connected_component_subgraphs(G)
    G_sc = max(scc_subs, key=len)
    return G_sc

What is the average distance between nodes in G_sc?

def answer_seven():
    G = answer_six()
    return nx.average_shortest_path_length(G)

What is the largest possible distance between two employees in G_sc?

def answer_eight():
    G = answer_six()
    return nx.diameter(G)

What is the set of nodes in G_sc with eccentricity equal to the diameter?

def answer_nine():
    G = answer_six()
    return set(nx.periphery(G))

What is the set of node(s) in G_sc with eccentricity equal to the radius?

def answer_ten():
    G = answer_six()
    return set(nx.center(G))

Which node in G_sc is connected to the most other nodes by a shortest path of length equal to the diameter of G_sc? How many nodes are connected to this node?

def answer_eleven():
    G = answer_six()
    d = nx.diameter(G)
    peripheries = nx.periphery(G)
    max_count = -1
    result_node = None
    for node in peripheries:
        count = 0
        sp = nx.shortest_path_length(G, node)
        for key, value in sp.items():
            if value == d:
                count += 1        
        if count > max_count:
            result_node = node
            max_count = count

    return result_node, max_count

Suppose you want to prevent communication from flowing to the node that you found in the previous question from any node in the center of G_sc, what is the smallest 
number of nodes you would need to remove from the graph (you're not allowed to remove the node from the previous question or the center nodes)?

def answer_twelve():
    G = answer_six()
    center = nx.center(G)[0]
    node = answer_eleven()[0]
    return len(nx.minimum_node_cut(G, center, node))

Construct an undirected graph G_un using G_sc (you can ignore the attributes).

def answer_thirteen():
    G = answer_six()
    undir_subgraph = G.to_undirected()
    G_un = nx.Graph(undir_subgraph)
    return G_un

What is the transitivity and average clustering coefficient of graph G_un?

def answer_fourteen():
    G = answer_thirteen()
    return nx.transitivity(G), nx.average_clustering(G)
    
   
    
    
    
    
    
