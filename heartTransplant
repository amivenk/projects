public class HeartTransplant {

    // patient array
    private Patient[] patients;

    // SurvivabilityByAge array
    private SurvivabilityByAge survivabilityByAge;

    // SurvivabilityByCause array
    private SurvivabilityByCause survivabilityByCause;
    
    public HeartTransplant() {
        patients = null;
        survivabilityByAge = null;
        survivabilityByCause = null; 
    }

    public Patient[] getPatients() {

        return patients;
    } 

    public SurvivabilityByAge getSurvivabilityByAge() {
        return survivabilityByAge;
    }

    public SurvivabilityByCause getSurvivabilityByCause() {
        return survivabilityByCause;
    }

    /*
     * 1) Initialize the instance variable patients array with numberOfLines length.
     * 
     * 2) Reads from the command line data file, use StdIn.readInt() to read an integer.
     *    File Format: 
     *      ID, ethnicity, Gender, Age, Cause, Urgency, State of health
     * 
     */
    public void readPatients (int numberOfLines) {
        patients = new Patient[numberOfLines];
        for (int i = 0; i<patients.length; i++){
            int ID = StdIn.readInt();
            int ethnicity = StdIn.readInt();
            int gender = StdIn.readInt();
            int age = StdIn.readInt();
            int cause = StdIn.readInt();
            int urgency = StdIn.readInt();
            int stateOfHealth = StdIn.readInt();
            patients[i] = new Patient(ID, Ethnicity, Gender, Cause, Urgency, StateOfHealth);
        }
    }

    /*
     * 1) Initialize the instance variable survivabilityByAge with a new survivabilityByAge object.
     * 
     * 2) Reads from the command line file to populate the object. 
     *    Use StdIn.readInt() to read an integer and StdIn.readDouble() to read a double.
     * 
     */
    public void readSurvivabilityByAge (int numberOfLines) {
        survivabilityByAge = new SurvivabilityByAge();
        for(int i = 0; i < numberOfLines; i++){
        int age = StdIn.readInt();
        int year = StdIn.readInt();
        double rate = StdIn.readDouble();
        survivabilityByAge.addData(age, year, rate);
        }
    }

    /*
     * 1) Initialize the instance variable survivabilityByCause with a new survivabilityByCause object.
     * 
     * 2) Reads from the command line file to populate the object. Use StdIn.readInt() to read an 
     *    integer and StdIn.readDouble() to read a double.
     * 
     */
    public void readSurvivabilityByCause (int numberOfLines) {
        survivabilityByCause = new SurvivabilityByCause();
        for(int i = 0; i < numberOfLines; i++){
            int cause = StdIn.readInt();
            int YearsPostTransplant = StdIn.readInt();
            double rate = StdIn.readDouble();
            survivabilityByCause.addData(cause, year, rate);
        }
    }
    
    /*
     * Returns a Patient array containing the patients, 
     * from the patients array, that have age above the parameter age.
     */ 
    public Patient[] getPatientsWithAgeAbove(int age) {
        Patient[] patientsAboveAge;
        int x = 0;
        for (Patient patient : patients){
            if(patient != null && patient.getAge() > age){
                x++;
            }
        }
        patientsAboveAge = new Patient[x];
        int i = 0; 
        for (Patient patient : patients){
            if(patient != null && patient.getAge() > age){
                patientsAboveAge[i] = patient;
                i++;
            }
        }
        return patientsAboveAge;
    }
    /*
     * Returns a Patient array containing the patients, from the patients array, 
     * that have the heart condition cause equal to the parameter cause.
     */ 
    public Patient[] getPatientsByHeartConditionCause(int cause) {
        Patient[] PatientsByHeartConditionCause;
        int length = 0; 
        for (Patient patient : patients)
            if(patient != null && patient.getCause() == cause)
            length++;
            patientsByHeartConditionCause = new Patient[length];
            int i = 0;
            for (Patient patient : patients)
                if (patient != null && patient.getCause() == cause){
                    patientsByHeartConditionCause[i] = patient;
                    i++;
                }
            return patientsByHeartConditionCause;
        
    }

    /*
     * Returns a Patient array containing patients, from the patients array,
     * that have the state of health equal to the parameter state.
     */ 
    public Patient[] getPatientsByUrgency(int urgency) {

        Patient[] patientsByUrgency; 
        int length = 0;
        for (Patient patient : patients)
            if(patient != null && patient.getUrgency() >= urgency)
                length++;
        patientsByUrgency = new Patient[length];
        int i = 0; 
        for (Patient patient : patients)
            if(patient != null && patient.getUrgency() >= urgency){
                patientsByUrgency[i] = patient;
                i++;
            }
            return patientsByUrgency;
        }
    }


    /*
     * Assume there is a heart available for transplantation surgery.
     * Also assume that the heart is of the same blood type as the
     * Patients on the patients array.
     * This method finds the Patient to be the recepient of this
     * heart.
     * 
     * The method returns a Patient from the patients array with
     * he highest potential for survivability after the transplant.
     * 
     * Assume the patient returned by this method will receive a heart,
     * therefore the Patient will no longer need a heart.
     * 
     * There is no correct solution, you may come up with any 
     * function to find the patient with the highest potential 
     * for survivability after the transplant.
     */ 
