package transit;

import java.util.ArrayList;

/**
 * This class contains methods which perform various operations on a layered linked
 * list to simulate transit
 * 
 * @author Ishaan Ivaturi
 * @author Prince Rawal
 */

public class Transit {
    private TNode trainZero; // a reference to the zero node in the train layer

    public Transit() { trainZero = null; }

    public Transit(TNode tz) { trainZero = tz; }
    
    public TNode getTrainZero () {
        return trainZero;
    }

    /**
     * Makes a layered linked list representing the given arrays of train stations, bus
     * stops, and walking locations. 
     */
    public void makeList(int[] trainStations, int[] busStops, int[] locations) {

        trainZero = new TNode();
       TNode ptrTrain = trainZero;
 
       for(int x = 0; x < trainStations.length; x++){
           ptrTrain.setNext(new TNode(trainStations[x]));
           ptrTrain = ptrTrain.getNext();
        }
 
       TNode busZero = new TNode();
       trainZero.setDown(busZero);
       busZero = trainZero.getDown();
       TNode ptrBus = busZero;
       ptrTrain = trainZero;
       ptrTrain = ptrTrain.getNext();
 
       for(int t = 0; t < busStops.length; t++){
           ptrBus.setNext(new TNode(busStops[t]));
           ptrBus = ptrBus.getNext();
          
           if(ptrTrain != null && ptrTrain.getLocation() == ptrBus.getLocation() ){
               ptrTrain.setDown(ptrBus);
               ptrTrain = ptrTrain.getNext();
           }
       }
 
       TNode locationZero = new TNode();
       busZero.setDown(locationZero);
       locationZero = busZero.getDown();
       TNode ptrWalk = locationZero;
       ptrBus = busZero;
       ptrBus = ptrBus.getNext();
 
       for(int t = 0; t < locations.length; t++){
           ptrWalk.setNext(new TNode(locations[t]));
           ptrWalk= ptrWalk.getNext();
              
           if(ptrBus != null && ptrBus.getLocation() == ptrWalk.getLocation()){
               ptrBus.setDown(ptrWalk);
               ptrWalk = ptrBus.getDown();
               ptrBus = ptrBus.getNext();
           }
       }
   }
    
    /**
     * Modifies the layered list to remove the given train station but NOT its associated
     * bus stop or walking location. Do nothing if the train station doesn't exist
     */
    public void removeTrainStation(int station) {
        TNode ptrTrain = trainZero;
     
       while(ptrTrain.getNext()!=null){
 
           if(ptrTrain.getNext() == null)
               return;
 
           if(ptrTrain.getNext().getLocation() == station){
               ptrTrain.setNext(ptrTrain.getNext().getNext());
               break;
           }
           ptrTrain = ptrTrain.getNext();
           }
       }

    /**
     * Modifies the layered list to add a new bus stop at the specified location. Do nothing
     * if there is no corresponding walking location.
     */
    public void addBusStop(int busStop) {
       TNode ptrBus = trainZero.getDown();
       TNode ptrWalk = trainZero.getDown().getDown();
       TNode pBus = null;
      
       while(ptrBus!=null){
           if(ptrBus.getLocation() == busStop)
               return;
           if(ptrBus.getLocation() > busStop){
               while(ptrWalk!=null && ptrWalk.getLocation()!=busStop){
                   ptrWalk = ptrWalk.getNext();
               }
               if(ptrWalk == null)
                   return;
               TNode bus1 = new TNode(busStop, ptrBus, ptrWalk);
               pBus.setNext(bus1);
               return;
           }
           pBus = ptrBus;
           ptrBus = ptrBus.getNext();
       }
       while(ptrWalk!=null && busStop != ptrWalk.getLocation()){
           ptrWalk = ptrWalk.getNext();
       }
       if(ptrWalk == null)
           return;
       TNode bus1 = new TNode(busStop, ptrBus, ptrWalk);
       pBus.setNext(bus1);
   }
    
    /**
     * Determines the optimal path to get to a given destination in the walking layer, and 
     * collects all the nodes which are visited in this path into an arraylist. 
     */
    public ArrayList<TNode> bestPath(int destination) {
       ArrayList<TNode> pathFinder = new ArrayList<TNode>();
       TNode ptrTrain = trainZero;
       pathFinder.add(ptrTrain);
 
           while(ptrTrain.getNext() != null && ptrTrain.getNext().getLocation() <= destination){
               ptrTrain = ptrTrain.getNext();
               pathFinder.add(ptrTrain);
           }
 
       ptrTrain = ptrTrain.getDown();
       pathFinder.add(ptrTrain);
          
           while(ptrTrain.getNext() != null && ptrTrain.getNext().getLocation() <= destination){
               ptrTrain = ptrTrain.getNext();
               pathFinder.add(ptrTrain);
           }
 
       ptrTrain = ptrTrain.getDown();
       pathFinder.add(ptrTrain);
      
           while(ptrTrain.getNext()!=null){
               if(ptrTrain.getNext().getLocation() <= destination)
                   pathFinder.add(ptrTrain.getNext());
              
               ptrTrain = ptrTrain.getNext();
           }
           return pathFinder; 
   }

    /**
     * Returns a deep copy of the given layered list, which contains exactly the same
     * locations and connections, but every node is a NEW node.
     */
    public TNode duplicate() {

        TNode ptr = trainZero.getNext();
       TNode ptrTrain = new TNode(0);
       TNode r = ptrTrain;
       TNode nKeep = ptrTrain;
      
       ptrTrain.setNext(new TNode());
       ptrTrain = ptrTrain.getNext();
 
       while(ptr.getNext()!=null){
           ptrTrain.setLocation(ptr.getLocation());
           ptrTrain.setNext(new TNode());
           ptrTrain = ptrTrain.getNext();
           ptr = ptr.getNext();
       }
       ptrTrain.setLocation(ptr.getLocation());
      
       ptr = trainZero.getDown().getNext();
       TNode ptrBus = new TNode(0);
       TNode g = ptrBus;
       r.setDown(ptrBus);
       ptrBus.setNext(new TNode());
       ptrBus = ptrBus.getNext();
       r = r.getNext();
 
       while(ptr!=null){
           ptrBus.setLocation(ptr.getLocation());
           if(r!=null && ptrBus.getLocation() == r.getLocation()){
               r.setDown(ptrBus);
               r = r.getNext();
           }
           if(ptr.getNext()!=null){
               ptrBus.setNext(new TNode());
               ptrBus = ptrBus.getNext();
           }
           ptr = ptr.getNext();
       }
 
       ptr = trainZero.getDown().getDown().getNext();
       TNode ptrWalk = new TNode(0);
       g.setDown(ptrWalk);
       ptrWalk.setNext(new TNode());
       ptrWalk = ptrWalk.getNext();
       g = g.getNext();
 
       while(ptr!=null){
          
           ptrWalk.setLocation(ptr.getLocation());
          
           if(g!=null && g.getLocation() == ptrWalk.getLocation()){
               g.setDown(ptrWalk);
               g = g.getNext();
           }
           if(ptr.getNext()!=null){
               ptrWalk.setNext(new TNode());
               ptrWalk = ptrWalk.getNext();
           }
           ptr = ptr.getNext();
       }
       return nKeep;
 
   }

    /**
     * Modifies the given layered list to add a scooter layer in between the bus and
     * walking layer.
     * 
     * @param scooterStops An int array representing where the scooter stops are located
     */
    public void addScooter(int[] scooterStops) {

        TNode scootZero = new TNode();
        TNode ptrScoot = scootZero;
        TNode ptrBus = trainZero.getDown();
        TNode locationZero = ptrBus.getDown();
        ptrBus.setDown(scootZero);
        scootZero.setDown(locationZero);
        TNode ptrWalk = locationZero;
           
            for(int h = 0; h < scooterStops.length; h++){
                TNode nNode = new TNode(scooterStops[h]);
                ptrScoot.setNext(nNode);
                ptrScoot = ptrScoot.getNext();
            }
  
        ptrScoot = scootZero;
            while(ptrBus.getNext() != null){
                while(ptrScoot.getNext() != null){
                    if(ptrBus.getNext().getLocation() == ptrScoot.getNext().getLocation())
                        ptrBus.getNext().setDown(ptrScoot.getNext());
                   
                    ptrScoot = ptrScoot.getNext();
                }
                ptrScoot = scootZero;
                ptrBus = ptrBus.getNext();
            }
  
        ptrScoot = scootZero;
        while(ptrScoot.getNext() != null){
            while(ptrWalk.getNext() != null){
                if(ptrScoot.getNext().getLocation() == ptrWalk.getNext().getLocation())
                    ptrScoot.getNext().setDown(ptrWalk.getNext());
               
            ptrWalk = ptrWalk.getNext();
            }
            ptrWalk = locationZero;
            ptrScoot = ptrScoot.getNext();
        }
    }

    /**
     * Used by the driver to display the layered linked list.
     */
    public void printList() {
        // Traverse the starts of the layers, then the layers within
        for (TNode vertPtr = trainZero; vertPtr != null; vertPtr = vertPtr.getDown()) {
            for (TNode horizPtr = vertPtr; horizPtr != null; horizPtr = horizPtr.getNext()) {
                // Output the location, then prepare for the arrow to the next
                StdOut.print(horizPtr.getLocation());
                if (horizPtr.getNext() == null) break;
                
                // Spacing is determined by the numbers in the walking layer
                for (int i = horizPtr.getLocation()+1; i < horizPtr.getNext().getLocation(); i++) {
                    StdOut.print("--");
                    int numLen = String.valueOf(i).length();
                    for (int j = 0; j < numLen; j++) StdOut.print("-");
                }
                StdOut.print("->");
            }

            // Prepare for vertical lines
            if (vertPtr.getDown() == null) break;
            StdOut.println();
            
            TNode downPtr = vertPtr.getDown();
            // Reset horizPtr, and output a | under each number
            for (TNode horizPtr = vertPtr; horizPtr != null; horizPtr = horizPtr.getNext()) {
                while (downPtr.getLocation() < horizPtr.getLocation()) downPtr = downPtr.getNext();
                if (downPtr.getLocation() == horizPtr.getLocation() && horizPtr.getDown() == downPtr) StdOut.print("|");
                else StdOut.print(" ");
                int numLen = String.valueOf(horizPtr.getLocation()).length();
                for (int j = 0; j < numLen-1; j++) StdOut.print(" ");
                
                if (horizPtr.getNext() == null) break;
                
                for (int i = horizPtr.getLocation()+1; i <= horizPtr.getNext().getLocation(); i++) {
                    StdOut.print("  ");

                    if (i != horizPtr.getNext().getLocation()) {
                        numLen = String.valueOf(i).length();
                        for (int j = 0; j < numLen; j++) StdOut.print(" ");
                    }
                }
            }
            StdOut.println();
        }
        StdOut.println();
    }
    
    /**
     * Used by the driver to display best path. 
     */
    public void printBestPath(int destination) {
        ArrayList<TNode> path = bestPath(destination);
        for (TNode vertPtr = trainZero; vertPtr != null; vertPtr = vertPtr.getDown()) {
            for (TNode horizPtr = vertPtr; horizPtr != null; horizPtr = horizPtr.getNext()) {
                // ONLY print the number if this node is in the path, otherwise spaces
                if (path.contains(horizPtr)) StdOut.print(horizPtr.getLocation());
                else {
                    int numLen = String.valueOf(horizPtr.getLocation()).length();
                    for (int i = 0; i < numLen; i++) StdOut.print(" ");
                }
                if (horizPtr.getNext() == null) break;
                
                // ONLY print the edge if both ends are in the path, otherwise spaces
                String separator = (path.contains(horizPtr) && path.contains(horizPtr.getNext())) ? ">" : " ";
                for (int i = horizPtr.getLocation()+1; i < horizPtr.getNext().getLocation(); i++) {
                    StdOut.print(separator + separator);
                    
                    int numLen = String.valueOf(i).length();
                    for (int j = 0; j < numLen; j++) StdOut.print(separator);
                }

                StdOut.print(separator + separator);
            }
            
            if (vertPtr.getDown() == null) break;
            StdOut.println();

            for (TNode horizPtr = vertPtr; horizPtr != null; horizPtr = horizPtr.getNext()) {
                // ONLY print the vertical edge if both ends are in the path, otherwise space
                StdOut.print((path.contains(horizPtr) && path.contains(horizPtr.getDown())) ? "V" : " ");
                int numLen = String.valueOf(horizPtr.getLocation()).length();
                for (int j = 0; j < numLen-1; j++) StdOut.print(" ");
                
                if (horizPtr.getNext() == null) break;
                
                for (int i = horizPtr.getLocation()+1; i <= horizPtr.getNext().getLocation(); i++) {
                    StdOut.print("  ");

                    if (i != horizPtr.getNext().getLocation()) {
                        numLen = String.valueOf(i).length();
                        for (int j = 0; j < numLen; j++) StdOut.print(" ");
                    }
                }
            }
            StdOut.println();
        }
        StdOut.println();
    }
}
